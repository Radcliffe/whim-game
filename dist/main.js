(()=>{"use strict";class e{constructor(){this.piles=[],this.gameOver=!1,this.MAX_HEIGHT=8,this.MAX_PILES=12}startNewGame(){const e=Math.floor(5*Math.random())+2;this.piles=Array.from({length:e},(()=>Math.floor(Math.random()*this.MAX_HEIGHT)+1)),this.gameOver=!1}heightMultiplicities(){const e={};return this.piles.forEach((t=>{e[t]=(e[t]||0)+1})),e}oddMultiplicityHeights(){const e=this.heightMultiplicities();return Object.keys(e).filter((t=>e[t]%2==1)).map(Number)}isWinning(){return this.oddMultiplicityHeights().length>0}isLosing(){return!this.isWinning()}isGameOver(){return 0===this.piles.length}replacePile(e,t){if(e<0||e>=this.piles.length)throw new Error("Invalid pile index.");const i=this.piles[e];return this.piles.splice(e,1,...t),i}removePile(e){if(e<0||e>=this.piles.length)throw new Error("Invalid pile index.");const t=this.piles[e];return this.piles.splice(e,1),t}makeComputerMove(){const e=this.oddMultiplicityHeights();let t,i;if(e.length>0){const s=Math.max(...e);t=this.piles.findIndex((e=>e===s)),i=e.filter((e=>e<s))}else t=Math.floor(Math.random()*this.piles.length),i=[];this.piles.length+i.length-1>this.MAX_PILES&&(i=i.slice(0,this.MAX_PILES-this.piles.length+1));const s=this.piles[t];return this.piles.splice(t,1,...i),{originalHeight:s,newHeights:i}}}class t{constructor(e,t){this.game=e,this.pilesContainer=t.getElementById("piles-container"),this.messageBox=t.getElementById("message"),this.newGameBtn=t.getElementById("new-game-btn"),this.computerMoveBtn=t.getElementById("computer-move-btn"),this.modal=t.getElementById("split-modal"),this.closeModal=t.getElementById("close-modal"),this.selectedPileHeight=t.getElementById("selected-pile-height"),this.newPilesInput=t.getElementById("new-piles-input"),this.replaceBtn=t.getElementById("replace-btn"),this.validationMessage=t.getElementById("validation-message"),this.selectedPileIndex=-1,this.currentTurn="player",this.initializeEventListeners()}initializeEventListeners(){this.newGameBtn.addEventListener("click",(()=>this.startNewGame())),this.computerMoveBtn.addEventListener("click",(()=>this.handleComputerMove())),this.closeModal.addEventListener("click",(()=>this.closeModalDialog())),this.replaceBtn.addEventListener("click",(()=>this.handleReplacePile()))}startNewGame(){this.game.startNewGame(),this.renderPiles(),this.messageBox.textContent="Your turn! Click on a pile to replace it.",this.messageBox.className="message-box player-message",this.computerMoveBtn.disabled=!1,this.currentTurn="either"}handleComputerMove(){if(this.game.isGameOver()||"human"==this.currentTurn)return;const{originalHeight:e,newHeights:t}=this.game.makeComputerMove(),i=0===t.length?`removed a pile of height ${e}.`:`replaced a pile of height ${e} with ${t.join(", ")}.`;this.messageBox.textContent=`Computer ${i}`,this.messageBox.className="message-box computer-message",this.renderPiles(),this.game.isGameOver()?this.endGame("Game over! Computer wins!"):(this.currentTurn="player",this.computerMoveBtn.disabled=!0)}handleReplacePile(){if(-1===this.selectedPileIndex||"computer"===this.currentTurn)return;const e=this.newPilesInput.value.trim();if(!e)return void(this.validationMessage.textContent="Please enter at least one pile height or 0 to remove.");const t=this.game.piles[this.selectedPileIndex];if("0"===e)return this.game.removePile(this.selectedPileIndex),this.closeModalDialog(),this.messageBox.textContent=`You removed a pile of height ${t}.`,this.renderPiles(),void(this.game.isGameOver()?this.endGame("Game over! You win!"):(this.currentTurn="computer",this.computerMoveBtn.disabled=!1));if(!/^[0-9\s]+$/.test(e))return void(this.validationMessage.textContent="Please enter valid pile heights (digits only).");const i=e.split(/\s+/).map(Number);i.some(isNaN)||i.some((e=>e<=0))||i.some((e=>e>=t))?this.validationMessage.textContent="Invalid pile heights. Ensure all are positive and less than the original height.":this.game.piles.length-1+i.length>12?this.validationMessage.textContent="The total number of piles cannot exceed 12.":(this.game.replacePile(this.selectedPileIndex,i),this.closeModalDialog(),this.messageBox.textContent=`You replaced a pile of height ${t} with ${i.join(", ")}.`,this.renderPiles(),this.game.isGameOver()?this.endGame("Game over! You win!"):(this.currentTurn="computer",this.computerMoveBtn.disabled=!1))}renderPiles(){this.pilesContainer.innerHTML="",this.game.piles.forEach(((e,t)=>{const i=document.createElement("div");i.className="pile",i.dataset.index=t;const s=document.createElement("div");s.className="pile-count",s.textContent=e,i.appendChild(s);for(let t=0;t<e;t++){const e=document.createElement("div");e.className="coin",i.appendChild(e)}this.game.gameOver||i.addEventListener("click",(()=>this.selectPile(t))),this.pilesContainer.appendChild(i)}))}selectPile(e){this.game.gameOver||"computer"===this.currentTurn||(this.selectedPileIndex=e,this.selectedPileHeight.textContent=this.game.piles[e],this.newPilesInput.value="",this.validationMessage.textContent="",this.modal.style.display="flex")}closeModalDialog(){this.modal.style.display="none",this.selectedPileIndex=-1}endGame(e){this.game.gameOver=!0,this.messageBox.textContent=e,this.messageBox.className="message-box game-over",this.computerMoveBtn.disabled=!0}}document.addEventListener("DOMContentLoaded",(()=>{const i=new e;new t(i,document).startNewGame()}))})();